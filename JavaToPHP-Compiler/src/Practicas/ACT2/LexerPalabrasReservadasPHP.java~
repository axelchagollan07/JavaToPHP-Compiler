/* The following code was generated by JFlex 1.6.1 */

/*
    CHAGOLL√ÅN CORONA AXEL EMMANUEL
    PHP
*/

package Practicas.ACT2;

import static Practicas.ACT2.Tokens.Type.*;




/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Practicas/ACT2/tokens_key_words.flex</tt>
 */
public class LexerPalabrasReservadasPHP {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\67\1\70\1\71\1\71\1\70\22\0\1\33\1\65\1\0"+
    "\1\72\1\0\1\61\1\62\1\0\1\41\1\42\1\55\1\57\1\47"+
    "\1\51\1\50\1\60\12\0\1\46\1\45\1\56\1\53\1\52\1\54"+
    "\11\0\1\35\11\0\1\34\7\0\1\43\1\0\1\44\1\64\1\31"+
    "\1\0\1\7\1\10\1\17\1\22\1\16\1\4\1\13\1\26\1\1"+
    "\1\15\1\25\1\5\1\23\1\2\1\6\1\27\1\32\1\12\1\11"+
    "\1\3\1\20\1\21\1\30\1\24\1\14\1\36\1\37\1\63\1\40"+
    "\1\66\6\0\1\71\u1fa2\0\1\71\1\71\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\27\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\2\0\1\34\10\0\1\35"+
    "\6\0\1\36\2\0\1\37\27\0\1\40\10\0\1\41"+
    "\1\0\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\0\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\6\0\1\73\2\0\1\74\4\0"+
    "\1\75\4\0\1\76\34\0\1\77\1\0\1\100\1\101"+
    "\4\0\1\102\15\0\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\0\1\112\7\0\1\113\1\0\1\114"+
    "\6\0\1\115\3\0\1\116\11\0\1\117\6\0\1\120"+
    "\1\121\1\122\1\0\1\123\7\0\1\124\1\0\1\125"+
    "\26\0\1\126\5\0\1\127\2\0\1\130\1\131\1\132"+
    "\1\133\1\0\1\134\3\0\1\135\1\136\10\0\1\137"+
    "\1\140\5\0\1\141\1\0\1\142\1\143\1\0\1\144"+
    "\1\145\1\0\1\146\2\0\1\147\1\150\1\151\3\0"+
    "\1\152\5\0\1\153\1\0\1\154\21\0\1\155\1\0"+
    "\1\156\1\157\1\160\1\161\3\0\1\162\1\0\1\163"+
    "\3\0\1\164\7\0\1\165\11\0\1\166\7\0\1\167"+
    "\3\0\1\170\1\171\4\0\1\172\5\0\1\173\2\0"+
    "\1\174\1\175\1\176\2\0\1\177\2\0\1\200\2\0"+
    "\1\201\2\0\1\202\10\0\1\203\2\0\1\204\1\205"+
    "\1\206\1\207\5\0\1\210\1\211\1\212\1\0\1\213"+
    "\11\0\1\214\1\215\1\0\1\216\2\0\1\217\3\0"+
    "\1\220\1\0\1\221\11\0\1\222\1\0\1\223\1\0"+
    "\1\224\1\225\1\226\1\227\1\230\6\0\1\231\2\0"+
    "\1\232\1\233\1\234\2\0\1\235\1\236\1\237\1\240"+
    "\1\0\1\241";

  private static int [] zzUnpackAction() {
    int [] result = new int[523];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375"+
    "\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d"+
    "\0\u0588\0\73\0\73\0\73\0\73\0\73\0\73\0\73"+
    "\0\u05c3\0\73\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea\0\u0725"+
    "\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd"+
    "\0\73\0\u0938\0\u0973\0\u09ae\0\73\0\u09e9\0\u0a24\0\u0a5f"+
    "\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\73\0\u0bc1\0\u0bfc"+
    "\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\73\0\u0d23\0\u0d5e\0\73"+
    "\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36"+
    "\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e"+
    "\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\73"+
    "\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483"+
    "\0\73\0\u14be\0\73\0\73\0\73\0\73\0\u14f9\0\73"+
    "\0\73\0\u1534\0\u156f\0\73\0\u15aa\0\73\0\u15e5\0\u1620"+
    "\0\73\0\73\0\73\0\u165b\0\73\0\73\0\73\0\73"+
    "\0\73\0\73\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd"+
    "\0\u17f8\0\u1833\0\73\0\u186e\0\u18a9\0\73\0\u18e4\0\u191f"+
    "\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\73"+
    "\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94"+
    "\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c"+
    "\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044"+
    "\0\u207f\0\u20ba\0\u20f5\0\u2130\0\73\0\u216b\0\73\0\73"+
    "\0\u21a6\0\u21e1\0\u221c\0\u2257\0\73\0\u2292\0\u22cd\0\u2308"+
    "\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0"+
    "\0\u251b\0\u2556\0\73\0\73\0\73\0\73\0\73\0\73"+
    "\0\73\0\u2591\0\73\0\u25cc\0\u2607\0\u2642\0\u267d\0\u26b8"+
    "\0\u26f3\0\u272e\0\73\0\u2769\0\73\0\u27a4\0\u27df\0\u281a"+
    "\0\u2855\0\u2890\0\u28cb\0\73\0\u2906\0\u2941\0\u297c\0\73"+
    "\0\u29b7\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54"+
    "\0\u2b8f\0\73\0\u2bca\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1"+
    "\0\u2d2c\0\73\0\73\0\u2d67\0\73\0\u2da2\0\u2ddd\0\u2e18"+
    "\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04\0\73\0\u2f3f\0\73\0\u2f7a"+
    "\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\u30dc\0\u3117\0\u3152"+
    "\0\u318d\0\u31c8\0\u3203\0\u323e\0\u3279\0\u32b4\0\u32ef\0\u332a"+
    "\0\u3365\0\u33a0\0\u33db\0\u3416\0\u3451\0\73\0\u348c\0\u34c7"+
    "\0\u3502\0\u353d\0\u3578\0\73\0\u35b3\0\u35ee\0\73\0\73"+
    "\0\u3629\0\73\0\u3664\0\73\0\u369f\0\u36da\0\u3715\0\73"+
    "\0\73\0\u3750\0\u378b\0\u37c6\0\u3801\0\u383c\0\u3877\0\u38b2"+
    "\0\u38ed\0\u3928\0\73\0\u3963\0\u399e\0\u39d9\0\u3a14\0\u3a4f"+
    "\0\73\0\u3a8a\0\73\0\73\0\u3ac5\0\73\0\73\0\u3b00"+
    "\0\73\0\u3b3b\0\u3b76\0\73\0\73\0\73\0\u3bb1\0\u3bec"+
    "\0\u3c27\0\73\0\u3c62\0\u3c9d\0\u3cd8\0\u3d13\0\u3d4e\0\u3d89"+
    "\0\u3dc4\0\73\0\u3dff\0\u3e3a\0\u3e75\0\u3eb0\0\u3eeb\0\u3f26"+
    "\0\u3f61\0\u3f9c\0\u3fd7\0\u4012\0\u404d\0\u4088\0\u40c3\0\u40fe"+
    "\0\u4139\0\u4174\0\u41af\0\73\0\u41ea\0\73\0\73\0\73"+
    "\0\73\0\u4225\0\u4260\0\u429b\0\73\0\u42d6\0\u4311\0\u434c"+
    "\0\u4387\0\u43c2\0\73\0\u43fd\0\u4438\0\u4473\0\u44ae\0\u44e9"+
    "\0\u4524\0\u455f\0\73\0\u459a\0\u45d5\0\u4610\0\u464b\0\u4686"+
    "\0\u46c1\0\u46fc\0\u4737\0\u4772\0\u47ad\0\u47e8\0\u4823\0\u485e"+
    "\0\u4899\0\u48d4\0\u490f\0\u494a\0\u4985\0\u49c0\0\u49fb\0\u4a36"+
    "\0\73\0\73\0\u4a71\0\u4aac\0\u4ae7\0\u4b22\0\u4b5d\0\u4b98"+
    "\0\u4bd3\0\u4c0e\0\u4c49\0\u4c84\0\73\0\u4cbf\0\u4cfa\0\73"+
    "\0\73\0\73\0\u4d35\0\u4d70\0\73\0\u4dab\0\u4de6\0\73"+
    "\0\u4e21\0\u4e5c\0\73\0\u4e97\0\u4ed2\0\73\0\u4f0d\0\u4f48"+
    "\0\u4f83\0\u4fbe\0\u4ff9\0\u5034\0\u506f\0\u50aa\0\73\0\u50e5"+
    "\0\u5120\0\73\0\73\0\73\0\73\0\u515b\0\u5196\0\u51d1"+
    "\0\u520c\0\u5247\0\73\0\73\0\73\0\u5282\0\73\0\u52bd"+
    "\0\u52f8\0\u5333\0\u536e\0\u53a9\0\u53e4\0\u541f\0\u545a\0\u5495"+
    "\0\73\0\73\0\u54d0\0\73\0\u550b\0\u5546\0\73\0\u5581"+
    "\0\u55bc\0\u55f7\0\73\0\u5632\0\73\0\u566d\0\u56a8\0\u56e3"+
    "\0\u571e\0\u5759\0\u5794\0\u57cf\0\u580a\0\u5845\0\73\0\u5880"+
    "\0\73\0\u58bb\0\73\0\73\0\73\0\73\0\73\0\u58f6"+
    "\0\u5931\0\u596c\0\u59a7\0\u59e2\0\u5a1d\0\73\0\u5a58\0\u5a93"+
    "\0\73\0\73\0\73\0\u5ace\0\u5b09\0\73\0\73\0\73"+
    "\0\73\0\u5b44\0\73";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[523];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\2\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\2\2\1\26\1\27"+
    "\1\30\1\2\1\31\3\2\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\2\31\1\0\1\62\75\0"+
    "\1\63\1\64\1\65\4\0\1\66\11\0\1\67\56\0"+
    "\1\70\6\0\1\71\1\0\1\72\64\0\1\73\13\0"+
    "\1\74\45\0\1\75\1\76\2\0\1\77\1\100\1\101"+
    "\10\0\1\102\53\0\1\103\101\0\1\104\1\0\1\105"+
    "\62\0\1\106\5\0\1\107\1\110\1\111\66\0\1\112"+
    "\3\0\1\113\63\0\1\114\24\0\1\115\60\0\1\116"+
    "\61\0\1\117\1\120\65\0\1\121\73\0\1\122\2\0"+
    "\1\123\11\0\1\124\1\0\1\125\1\0\1\126\1\127"+
    "\53\0\1\130\1\131\1\132\65\0\1\133\6\0\1\134"+
    "\67\0\1\135\1\136\64\0\1\137\4\0\1\140\7\0"+
    "\1\141\55\0\1\142\5\0\1\143\71\0\1\144\76\0"+
    "\1\145\5\0\1\146\100\0\1\147\75\0\1\150\74\0"+
    "\1\31\33\0\2\31\50\0\1\151\74\0\1\152\2\0"+
    "\1\153\70\0\1\154\1\155\1\156\71\0\1\157\1\160"+
    "\71\0\1\161\1\162\73\0\1\163\71\0\1\164\1\0"+
    "\1\165\67\0\1\166\1\167\2\0\1\170\67\0\1\171"+
    "\3\0\1\172\66\0\1\173\1\0\1\174\2\0\1\62"+
    "\65\0\1\175\72\0\1\176\6\0\1\177\63\0\1\200"+
    "\7\0\1\201\62\0\1\202\72\0\1\203\17\0\70\62"+
    "\2\0\1\62\3\0\1\204\5\0\1\205\5\0\1\206"+
    "\71\0\1\207\65\0\1\210\110\0\1\211\66\0\1\212"+
    "\77\0\1\213\47\0\1\214\74\0\1\215\4\0\1\216"+
    "\3\0\1\217\64\0\1\220\62\0\1\221\76\0\1\222"+
    "\76\0\1\223\65\0\1\224\67\0\1\225\101\0\1\226"+
    "\76\0\1\227\77\0\1\230\61\0\1\231\73\0\1\232"+
    "\66\0\1\233\102\0\1\234\63\0\1\235\2\0\1\236"+
    "\61\0\1\237\74\0\1\240\3\0\1\241\1\0\1\242"+
    "\20\0\1\243\46\0\1\244\67\0\1\245\105\0\1\246"+
    "\76\0\1\247\61\0\1\250\107\0\1\251\53\0\1\252"+
    "\112\0\1\253\44\0\1\254\1\0\1\255\75\0\1\256"+
    "\1\257\65\0\1\260\73\0\1\261\1\0\1\262\3\0"+
    "\1\263\72\0\1\264\77\0\1\265\55\0\1\266\103\0"+
    "\1\267\76\0\1\270\60\0\1\271\12\0\1\272\77\0"+
    "\1\273\51\0\1\274\101\0\1\275\61\0\1\276\4\0"+
    "\1\277\74\0\1\300\63\0\1\301\72\0\1\302\1\0"+
    "\1\303\3\0\1\304\1\0\1\305\1\0\1\306\3\0"+
    "\1\307\1\310\1\0\1\311\5\0\1\312\112\0\1\313"+
    "\75\0\1\314\72\0\1\315\72\0\1\316\72\0\1\317"+
    "\71\0\1\320\73\0\1\321\17\0\55\174\1\322\15\174"+
    "\53\0\1\323\35\0\1\324\57\0\1\325\74\0\1\326"+
    "\77\0\1\327\76\0\1\330\61\0\1\331\103\0\1\332"+
    "\61\0\1\333\66\0\1\334\107\0\1\335\62\0\1\336"+
    "\73\0\1\337\72\0\1\340\101\0\1\341\65\0\1\342"+
    "\100\0\1\343\56\0\1\344\105\0\1\345\57\0\1\346"+
    "\76\0\1\347\70\0\1\350\74\0\1\351\66\0\1\352"+
    "\70\0\1\353\74\0\1\354\107\0\1\355\74\0\1\356"+
    "\56\0\1\357\104\0\1\360\62\0\1\361\70\0\1\362"+
    "\71\0\1\363\66\0\1\364\2\0\1\365\4\0\1\366"+
    "\10\0\1\367\5\0\1\370\60\0\1\371\62\0\1\372"+
    "\71\0\1\373\70\0\1\374\72\0\1\375\105\0\1\376"+
    "\56\0\1\377\101\0\1\u0100\64\0\1\u0101\5\0\1\u0102"+
    "\100\0\1\u0103\60\0\1\u0104\103\0\1\u0105\72\0\1\u0106"+
    "\76\0\1\u0107\57\0\1\u0108\70\0\1\u0109\103\0\1\u010a"+
    "\73\0\1\u010b\55\0\1\u010c\16\0\1\u010d\54\0\1\u010e"+
    "\74\0\1\u010f\72\0\1\u0110\67\0\1\u0111\6\0\1\u0112"+
    "\67\0\1\u0113\104\0\1\u0114\57\0\1\u0115\10\0\1\u0116"+
    "\72\0\1\u0117\61\0\1\u0118\1\u0119\1\u011a\65\0\1\u011b"+
    "\106\0\1\u011c\63\0\1\u011d\63\0\55\174\1\322\2\174"+
    "\1\u011e\12\174\12\0\1\u011f\67\0\1\u0120\6\0\1\u0121"+
    "\74\0\1\u0122\61\0\1\u0123\66\0\1\u0124\105\0\1\u0125"+
    "\65\0\1\u0126\64\0\1\u0127\117\0\1\u0128\47\0\1\u0129"+
    "\70\0\1\u012a\76\0\1\u012b\101\0\1\u012c\57\0\1\u012d"+
    "\106\0\1\u012e\65\0\1\u012f\74\0\1\u0130\103\0\1\u0131"+
    "\46\0\1\u0132\73\0\1\u0133\107\0\1\u0134\65\0\1\u0135"+
    "\66\0\1\u0136\104\0\1\u0137\53\0\1\u0138\100\0\1\u0139"+
    "\105\0\1\u013a\54\0\1\u013b\74\0\1\u013c\114\0\1\u013d"+
    "\60\0\1\u013e\102\0\1\u013f\45\0\1\u0140\105\0\1\u0141"+
    "\60\0\1\u0142\106\0\1\u0143\65\0\1\u0144\62\0\1\u0145"+
    "\74\0\1\u0146\115\0\1\u0147\53\0\1\u0148\66\0\1\u0149"+
    "\107\0\1\u014a\61\0\1\u014b\105\0\1\u014c\76\0\1\u014d"+
    "\47\0\1\u014e\76\0\1\u014f\101\0\1\u0150\55\0\1\u0151"+
    "\107\0\1\u0152\75\0\1\u0153\62\0\1\u0154\115\0\1\u0155"+
    "\41\0\1\u0156\105\0\1\u0157\57\0\1\u0158\6\0\1\u0159"+
    "\63\0\1\u015a\75\0\1\u015b\66\0\1\u015c\75\0\1\u015d"+
    "\76\0\1\u015e\71\0\1\u015f\1\u0160\106\0\1\u0161\51\0"+
    "\1\u0162\70\0\1\u0163\77\0\1\u0164\105\0\1\u0165\60\0"+
    "\1\u0166\105\0\1\u0167\76\0\1\u0168\50\0\1\u0169\104\0"+
    "\1\u016a\54\0\1\u016b\74\0\1\u016c\76\0\1\u016d\102\0"+
    "\1\u016e\66\0\1\u016f\105\0\1\u0170\46\0\1\u0171\72\0"+
    "\1\u0172\102\0\1\u0173\72\0\1\u0174\65\0\1\u0175\120\0"+
    "\1\u0176\51\0\1\u0177\61\0\1\u0178\110\0\1\u0179\54\0"+
    "\1\u017a\75\0\1\u017b\110\0\1\u017c\52\0\1\u017d\100\0"+
    "\1\u017e\67\0\1\u017f\77\0\1\u0180\63\0\1\u0181\106\0"+
    "\1\u0182\72\0\1\u0183\61\0\1\u0184\102\0\1\u0185\57\0"+
    "\1\u0186\75\0\1\u0187\102\0\1\u0188\105\0\1\u0189\42\0"+
    "\1\u018a\73\0\1\u018b\101\0\1\u018c\66\0\1\u018d\103\0"+
    "\1\u018e\74\0\1\u018f\55\0\1\u0190\105\0\1\u0191\63\0"+
    "\1\u0192\102\0\1\u0193\75\0\1\u0194\66\0\1\u0195\61\0"+
    "\1\u0196\103\0\1\u0197\63\0\1\u0198\77\0\1\u0199\104\0"+
    "\1\u019a\52\0\1\u019b\103\0\1\u019c\60\0\1\u019d\104\0"+
    "\1\u019e\71\0\1\u019f\60\0\1\u01a0\104\0\1\u01a1\57\0"+
    "\1\u01a2\74\0\1\u01a3\72\0\1\u01a4\76\0\1\u01a5\101\0"+
    "\1\u01a6\57\0\1\u01a7\70\0\1\u01a8\105\0\1\u01a9\72\0"+
    "\1\u01aa\57\0\1\u01ab\114\0\1\u01ac\50\0\1\u01ad\101\0"+
    "\1\u01ae\65\0\1\u01af\114\0\1\u01b0\54\0\1\u01b1\70\0"+
    "\1\u01b2\101\0\1\u01b3\57\0\1\u01b4\123\0\1\u01b5\41\0"+
    "\1\u01b6\6\0\1\u01b7\73\0\1\u01b8\71\0\1\u01b9\100\0"+
    "\1\u01ba\71\0\1\u01bb\71\0\1\u01bc\62\0\1\u01bd\115\0"+
    "\1\u01be\57\0\1\u01bf\56\0\1\u01c0\107\0\1\u01c1\55\0"+
    "\1\u01c2\73\0\1\u01c3\103\0\1\u01c4\74\0\1\u01c5\105\0"+
    "\1\u01c6\53\0\1\u01c7\67\0\1\u01c8\102\0\1\u01c9\62\0"+
    "\1\u01ca\101\0\1\u01cb\72\0\1\u01cc\72\0\1\u01cd\72\0"+
    "\1\u01ce\72\0\1\u01cf\55\0\1\u01d0\77\0\1\u01d1\67\0"+
    "\1\u01d2\74\0\1\u01d3\77\0\1\u01d4\63\0\1\u01d5\70\0"+
    "\1\u01d6\126\0\1\u01d7\55\0\1\u01d8\101\0\1\u01d9\61\0"+
    "\1\u01da\62\0\1\u01db\70\0\1\u01dc\74\0\1\u01dd\67\0"+
    "\1\u01de\105\0\1\u01df\62\0\1\u01e0\72\0\1\u01e1\103\0"+
    "\1\u01e2\101\0\1\u01e3\56\0\1\u01e4\102\0\1\u01e5\52\0"+
    "\1\u01e6\77\0\1\u01e7\72\0\1\u01e8\64\0\1\u01e9\111\0"+
    "\1\u01ea\61\0\1\u01eb\72\0\1\u01ec\65\0\1\u01ed\107\0"+
    "\1\u01ee\57\0\1\u01ef\70\0\1\u01f0\101\0\1\u01f1\63\0"+
    "\1\u01f2\113\0\1\u01f3\75\0\1\u01f4\62\0\1\u01f5\67\0"+
    "\1\u01f6\101\0\1\u01f7\53\0\1\u01f8\125\0\1\u01f9\53\0"+
    "\1\u01fa\56\0\1\u01fb\74\0\1\u01fc\71\0\1\u01fd\71\0"+
    "\1\u01fe\106\0\1\u01ff\72\0\1\u0200\71\0\1\u0201\72\0"+
    "\1\u0202\57\0\1\u0203\70\0\1\u0204\72\0\1\u0205\77\0"+
    "\1\u0206\102\0\1\u0207\72\0\1\u0208\73\0\1\u0209\111\0"+
    "\1\u020a\52\0\1\u020b\54\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23423];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\27\1\7\11\1\1\1\11\16\1\1\11"+
    "\1\1\2\0\1\11\10\0\1\11\6\0\1\11\2\0"+
    "\1\11\27\0\1\11\10\0\1\11\1\0\4\11\1\1"+
    "\2\11\2\1\1\11\1\1\1\11\2\1\3\11\1\0"+
    "\6\11\2\1\6\0\1\11\2\0\1\11\4\0\1\1"+
    "\4\0\1\11\34\0\1\11\1\0\2\11\4\0\1\11"+
    "\15\0\7\11\1\0\1\11\7\0\1\11\1\0\1\11"+
    "\6\0\1\11\3\0\1\11\11\0\1\11\6\0\1\1"+
    "\2\11\1\0\1\11\7\0\1\11\1\0\1\11\26\0"+
    "\1\11\5\0\1\11\2\0\2\11\1\1\1\11\1\0"+
    "\1\11\3\0\2\11\10\0\1\1\1\11\5\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\1\11\2\0\3\11"+
    "\3\0\1\11\5\0\1\1\1\0\1\11\21\0\1\11"+
    "\1\0\4\11\3\0\1\11\1\0\1\1\3\0\1\11"+
    "\7\0\1\11\11\0\1\1\7\0\1\1\3\0\2\11"+
    "\4\0\1\1\5\0\1\11\2\0\3\11\2\0\1\11"+
    "\2\0\1\11\2\0\1\11\2\0\1\11\10\0\1\11"+
    "\2\0\4\11\5\0\3\11\1\0\1\11\11\0\2\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\1\0\1\11"+
    "\11\0\1\11\1\0\1\11\1\0\5\11\6\0\1\11"+
    "\2\0\3\11\2\0\4\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[523];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerPalabrasReservadasPHP(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Practicas.ACT2.Tokens(ERROR, yytext(), yyline+1, yycolumn+1);
            }
          case 162: break;
          case 2: 
            { /* Ignorar espacios en blanco */
            }
          case 163: break;
          case 3: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
        System.out.println(yytext()+" -> Llave apertura ");
        return new Practicas.ACT2.Tokens(Tokens.Type.LLAVE_APERTURA, yytext(), (yyline+1), (yycolumn+1));
            }
          case 164: break;
          case 4: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
        System.out.println(yytext()+" -> Llave cierre ");
        return new Practicas.ACT2.Tokens(Tokens.Type.LLAVE_CIERRE, yytext(), (yyline+1), (yycolumn+1));
            }
          case 165: break;
          case 5: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
        System.out.println(yytext()+" -> Par√©ntesis apertura ");
        return new Practicas.ACT2.Tokens(Tokens.Type.LPAREN, yytext(), (yyline+1), (yycolumn+1));
            }
          case 166: break;
          case 6: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
        System.out.println(yytext()+" -> Par√©ntesis cierre ");
        return new Practicas.ACT2.Tokens(Tokens.Type.RPAREN, yytext(), (yyline+1), (yycolumn+1));
            }
          case 167: break;
          case 7: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
        System.out.println(yytext()+" -> Corchete apertura ");
        return new Practicas.ACT2.Tokens(Tokens.Type.LBRACKET, yytext(), (yyline+1), (yycolumn+1));
            }
          case 168: break;
          case 8: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
        System.out.println(yytext()+" -> Corchete cierre ");
        return new Practicas.ACT2.Tokens(Tokens.Type.RBRACKET, yytext(), (yyline+1), (yycolumn+1));
            }
          case 169: break;
          case 9: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
        System.out.println(yytext()+" -> Punto y coma ");
        return new Practicas.ACT2.Tokens(Tokens.Type.SEMICOLON, yytext(), (yyline+1), (yycolumn+1));
            }
          case 170: break;
          case 10: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
        System.out.println(yytext()+" -> Dos puntos ");
        return new Practicas.ACT2.Tokens(Tokens.Type.COLON, yytext(), (yyline+1), (yycolumn+1));
            }
          case 171: break;
          case 11: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
        System.out.println(yytext()+" -> Coma ");
        return new Practicas.ACT2.Tokens(Tokens.Type.COMMA, yytext(), (yyline+1), (yycolumn+1));
            }
          case 172: break;
          case 12: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
        System.out.println(yytext()+" -> Punto ");
        return new Practicas.ACT2.Tokens(Tokens.Type.DOT, yytext(), (yyline+1), (yycolumn+1));
            }
          case 173: break;
          case 13: 
            { return new Practicas.ACT2.Tokens(MINUS, yytext(), yyline+1, yycolumn+1);
            }
          case 174: break;
          case 14: 
            { return new Practicas.ACT2.Tokens(GT, yytext(), yyline+1, yycolumn+1);
            }
          case 175: break;
          case 15: 
            { return new Practicas.ACT2.Tokens(ASSIGN, yytext(), yyline+1, yycolumn+1);
            }
          case 176: break;
          case 16: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
        System.out.println(yytext()+" -> Operador ternario ?");
        return new Practicas.ACT2.Tokens(Tokens.Type.QUESTION, yytext(), (yyline+1), (yycolumn+1));
            }
          case 177: break;
          case 17: 
            { return new Practicas.ACT2.Tokens(MUL, yytext(), yyline+1, yycolumn+1);
            }
          case 178: break;
          case 18: 
            { return new Practicas.ACT2.Tokens(LT, yytext(), yyline+1, yycolumn+1);
            }
          case 179: break;
          case 19: 
            { return new Practicas.ACT2.Tokens(PLUS, yytext(), yyline+1, yycolumn+1);
            }
          case 180: break;
          case 20: 
            { return new Practicas.ACT2.Tokens(DIV, yytext(), yyline+1, yycolumn+1);
            }
          case 181: break;
          case 21: 
            { return new Practicas.ACT2.Tokens(MOD, yytext(), yyline+1, yycolumn+1);
            }
          case 182: break;
          case 22: 
            { return new Practicas.ACT2.Tokens(BIT_AND, yytext(), yyline+1, yycolumn+1);
            }
          case 183: break;
          case 23: 
            { return new Practicas.ACT2.Tokens(BIT_OR, yytext(), yyline+1, yycolumn+1);
            }
          case 184: break;
          case 24: 
            { return new Practicas.ACT2.Tokens(BIT_XOR, yytext(), yyline+1, yycolumn+1);
            }
          case 185: break;
          case 25: 
            { return new Practicas.ACT2.Tokens(NOT, yytext(), yyline+1, yycolumn+1);
            }
          case 186: break;
          case 26: 
            { return new Practicas.ACT2.Tokens(BIT_NOT, yytext(), yyline+1, yycolumn+1);
            }
          case 187: break;
          case 27: 
            { /* Ignorar comentario de l√≠nea */
            }
          case 188: break;
          case 28: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada if "); return new Tokens(IF, yytext(), yyline+1, yycolumn+1);
            }
          case 189: break;
          case 29: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada fn (arrow func) "); return new Tokens(FN, yytext(), yyline+1, yycolumn+1);
            }
          case 190: break;
          case 30: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Operador l√≥gico or "); return new Tokens(OR, yytext(), yyline+1, yycolumn+1);
            }
          case 191: break;
          case 31: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada as "); return new Tokens(AS, yytext(), yyline+1, yycolumn+1);
            }
          case 192: break;
          case 32: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada do "); return new Tokens(DO, yytext(), yyline+1, yycolumn+1);
            }
          case 193: break;
          case 33: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
        System.out.println(yytext()+" -> Resoluci√≥n de √°mbito :: ");
        return new Practicas.ACT2.Tokens(Tokens.Type.SCOPE_RESOLUTION, yytext(), (yyline+1), (yycolumn+1));
            }
          case 194: break;
          case 34: 
            { return new Practicas.ACT2.Tokens(DOT_ASSIGN, yytext(), yyline+1, yycolumn+1);
            }
          case 195: break;
          case 35: 
            { return new Practicas.ACT2.Tokens(DEC, yytext(), yyline+1, yycolumn+1);
            }
          case 196: break;
          case 36: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
        System.out.println(yytext()+" -> Operador flecha -> ");
        return new Practicas.ACT2.Tokens(Tokens.Type.ARROW, yytext(), (yyline+1), (yycolumn+1));
            }
          case 197: break;
          case 37: 
            { return new Practicas.ACT2.Tokens(MINUS_ASSIGN, yytext(), yyline+1, yycolumn+1);
            }
          case 198: break;
          case 38: 
            { return new Practicas.ACT2.Tokens(SHR, yytext(), yyline+1, yycolumn+1);
            }
          case 199: break;
          case 39: 
            { return new Practicas.ACT2.Tokens(GE, yytext(), yyline+1, yycolumn+1);
            }
          case 200: break;
          case 40: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
        System.out.println(yytext()+" -> Doble flecha => ");
        return new Practicas.ACT2.Tokens(Tokens.Type.DOUBLE_ARROW, yytext(), (yyline+1), (yycolumn+1));
            }
          case 201: break;
          case 41: 
            { return new Practicas.ACT2.Tokens(EQ, yytext(), yyline+1, yycolumn+1);
            }
          case 202: break;
          case 42: 
            { return new Practicas.ACT2.Tokens(NULL_COALESCE, yytext(), yyline+1, yycolumn+1);
            }
          case 203: break;
          case 43: 
            { return new Practicas.ACT2.Tokens(MUL_ASSIGN, yytext(), yyline+1, yycolumn+1);
            }
          case 204: break;
          case 44: 
            { return new Practicas.ACT2.Tokens(POW, yytext(), yyline+1, yycolumn+1);
            }
          case 205: break;
          case 45: 
            { return new Practicas.ACT2.Tokens(NEQ_ANGLED, yytext(), yyline+1, yycolumn+1);
            }
          case 206: break;
          case 46: 
            { return new Practicas.ACT2.Tokens(LE, yytext(), yyline+1, yycolumn+1);
            }
          case 207: break;
          case 47: 
            { return new Practicas.ACT2.Tokens(SHL, yytext(), yyline+1, yycolumn+1);
            }
          case 208: break;
          case 48: 
            { return new Practicas.ACT2.Tokens(PLUS_ASSIGN, yytext(), yyline+1, yycolumn+1);
            }
          case 209: break;
          case 49: 
            { return new Practicas.ACT2.Tokens(INC, yytext(), yyline+1, yycolumn+1);
            }
          case 210: break;
          case 50: 
            { return new Tokens(DIV_ASSIGN, yytext(), yyline+1, yycolumn+1);
            }
          case 211: break;
          case 51: 
            { return new Practicas.ACT2.Tokens(MOD_ASSIGN, yytext(), yyline+1, yycolumn+1);
            }
          case 212: break;
          case 52: 
            { return new Practicas.ACT2.Tokens(AND_ASSIGN, yytext(), yyline+1, yycolumn+1);
            }
          case 213: break;
          case 53: 
            { return new Practicas.ACT2.Tokens(AND_AND, yytext(), yyline+1, yycolumn+1);
            }
          case 214: break;
          case 54: 
            { return new Practicas.ACT2.Tokens(OR_ASSIGN, yytext(), yyline+1, yycolumn+1);
            }
          case 215: break;
          case 55: 
            { return new Practicas.ACT2.Tokens(OR_OR, yytext(), yyline+1, yycolumn+1);
            }
          case 216: break;
          case 56: 
            { return new Practicas.ACT2.Tokens(XOR_ASSIGN, yytext(), yyline+1, yycolumn+1);
            }
          case 217: break;
          case 57: 
            { return new Practicas.ACT2.Tokens(NEQ, yytext(), yyline+1, yycolumn+1);
            }
          case 218: break;
          case 58: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Tipo de dato int "); return new Tokens(INT, yytext(), yyline+1, yycolumn+1);
            }
          case 219: break;
          case 59: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada new "); return new Tokens(NEW, yytext(), yyline+1, yycolumn+1);
            }
          case 220: break;
          case 60: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada try ");          return new Practicas.ACT2.Tokens(Tokens.Type.TRY, yytext (), (yyline+1), (yycolumn+1));
            }
          case 221: break;
          case 61: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada for "); return new Tokens(FOR, yytext(), yyline+1, yycolumn+1);
            }
          case 222: break;
          case 62: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Operador l√≥gico and "); return new Tokens(AND, yytext(), yyline+1, yycolumn+1);
            }
          case 223: break;
          case 63: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada use ");          return new Practicas.ACT2.Tokens(Tokens.Type.USE, yytext (), (yyline+1), (yycolumn+1));
            }
          case 224: break;
          case 64: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada var ");          return new Practicas.ACT2.Tokens(Tokens.Type.VAR, yytext (), (yyline+1), (yycolumn+1));
            }
          case 225: break;
          case 65: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada die "); return new Tokens(DIE, yytext(), yyline+1, yycolumn+1);
            }
          case 226: break;
          case 66: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Operador l√≥gico xor ");            return new Practicas.ACT2.Tokens(Tokens.Type.XOR, yytext (), (yyline+1), (yycolumn+1));
            }
          case 227: break;
          case 67: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
        System.out.println(yytext()+" -> Puntos suspensivos ");
        return new Practicas.ACT2.Tokens(Tokens.Type.ELLIPSIS, yytext(), (yyline+1), (yycolumn+1));
            }
          case 228: break;
          case 68: 
            { return new Practicas.ACT2.Tokens(SHR_ASSIGN, yytext(), yyline+1, yycolumn+1);
            }
          case 229: break;
          case 69: 
            { return new Practicas.ACT2.Tokens(IDENT, yytext(), yyline+1, yycolumn+1);
            }
          case 230: break;
          case 70: 
            { return new Practicas.ACT2.Tokens(NULL_COALESCE_ASSIGN, yytext(), yyline+1, yycolumn+1);
            }
          case 231: break;
          case 71: 
            { return new Tokens(POW_ASSIGN, yytext(), yyline+1, yycolumn+1);
            }
          case 232: break;
          case 72: 
            { return new Practicas.ACT2.Tokens(SPACESHIP, yytext(), yyline+1, yycolumn+1);
            }
          case 233: break;
          case 73: 
            { return new Tokens(SHL_ASSIGN, yytext(), yyline+1, yycolumn+1);
            }
          case 234: break;
          case 74: 
            { return new Practicas.ACT2.Tokens(NIDENT, yytext(), yyline+1, yycolumn+1);
            }
          case 235: break;
          case 75: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Tipo de dato null "); return new Tokens(NULL, yytext(), yyline+1, yycolumn+1);
            }
          case 236: break;
          case 76: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Constante booleana true "); return new Tokens(TRUE, yytext(), yyline+1, yycolumn+1);
            }
          case 237: break;
          case 77: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada list "); return new Tokens(LIST, yytext(), yyline+1, yycolumn+1);
            }
          case 238: break;
          case 78: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Tipo de dato boolean "); return new Tokens(BOOLEAN, yytext(), yyline+1, yycolumn+1);
            }
          case 239: break;
          case 79: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada goto "); return new Tokens(GOTO, yytext(), yyline+1, yycolumn+1);
            }
          case 240: break;
          case 80: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada else "); return new Tokens(ELSE, yytext(), yyline+1, yycolumn+1);
            }
          case 241: break;
          case 81: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada echo "); return new Tokens(ECHO, yytext(), yyline+1, yycolumn+1);
            }
          case 242: break;
          case 82: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada eval "); return new Tokens(EVAL, yytext(), yyline+1, yycolumn+1);
            }
          case 243: break;
          case 83: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada exit "); return new Tokens(EXIT, yytext(), yyline+1, yycolumn+1);
            }
          case 244: break;
          case 84: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada case "); return new Tokens(CASE, yytext(), yyline+1, yycolumn+1);
            }
          case 245: break;
          case 85: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Tipo de dato void "); return new Tokens(VOID, yytext(), yyline+1, yycolumn+1);
            }
          case 246: break;
          case 86: 
            { /* Ignorar comentario de bloque */
            }
          case 247: break;
          case 87: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada isset "); return new Tokens(ISSET, yytext(), yyline+1, yycolumn+1);
            }
          case 248: break;
          case 88: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada trait ");        return new Practicas.ACT2.Tokens(Tokens.Type.TRAIT, yytext (), (yyline+1), (yycolumn+1));
            }
          case 249: break;
          case 89: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada throw ");        return new Practicas.ACT2.Tokens(Tokens.Type.THROW, yytext (), (yyline+1), (yycolumn+1));
            }
          case 250: break;
          case 90: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada final "); return new Tokens(FINAL, yytext(), yyline+1, yycolumn+1);
            }
          case 251: break;
          case 91: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Tipo de dato float "); return new Tokens(FLOAT, yytext(), yyline+1, yycolumn+1);
            }
          case 252: break;
          case 92: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Constante booleana false "); return new Tokens(FALSE, yytext(), yyline+1, yycolumn+1);
            }
          case 253: break;
          case 93: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Tipo de dato array "); return new Tokens(ARRAY, yytext(), yyline+1, yycolumn+1);
            }
          case 254: break;
          case 94: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada break "); return new Tokens(BREAK, yytext(), yyline+1, yycolumn+1);
            }
          case 255: break;
          case 95: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada yield "); return new Practicas.ACT2.Tokens(Tokens.Type.YIELD, yytext(), yyline+1, yycolumn+1);
            }
          case 256: break;
          case 96: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada endif "); return new Tokens(ENDIF, yytext(), yyline+1, yycolumn+1);
            }
          case 257: break;
          case 97: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada empty "); return new Tokens(EMPTY, yytext(), yyline+1, yycolumn+1);
            }
          case 258: break;
          case 98: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada clone "); return new Tokens(CLONE_KW, yytext(), yyline+1, yycolumn+1);
            }
          case 259: break;
          case 99: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada class "); return new Tokens(CLASS, yytext(), yyline+1, yycolumn+1);
            }
          case 260: break;
          case 100: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada const "); return new Tokens(CONST, yytext(), yyline+1, yycolumn+1);
            }
          case 261: break;
          case 101: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada catch "); return new Tokens(CATCH, yytext(), yyline+1, yycolumn+1);
            }
          case 262: break;
          case 102: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada unset ");        return new Practicas.ACT2.Tokens(Tokens.Type.UNSET, yytext (), (yyline+1), (yycolumn+1));
            }
          case 263: break;
          case 103: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Tipo de dato mixed "); return new Tokens(MIXED, yytext(), yyline+1, yycolumn+1);
            }
          case 264: break;
          case 104: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada match "); return new Tokens(MATCH, yytext(), yyline+1, yycolumn+1);
            }
          case 265: break;
          case 105: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada print ");        return new Practicas.ACT2.Tokens(Tokens.Type.PRINT, yytext (), (yyline+1), (yycolumn+1));
            }
          case 266: break;
          case 106: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada while ");        return new Practicas.ACT2.Tokens(Tokens.Type.WHILE, yytext (), (yyline+1), (yycolumn+1));
            }
          case 267: break;
          case 107: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Funci√≥n m√°gica __set ");        return new Practicas.ACT2.Tokens(Tokens.Type.SET, yytext(), (yyline+1), (yycolumn+1));
            }
          case 268: break;
          case 108: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Funci√≥n m√°gica __get ");        return new Practicas.ACT2.Tokens(Tokens.Type.GET, yytext(), (yyline+1), (yycolumn+1));
            }
          case 269: break;
          case 109: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Tipo de dato object "); return new Tokens(OBJECT, yytext(), yyline+1, yycolumn+1);
            }
          case 270: break;
          case 110: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada static ");       return new Practicas.ACT2.Tokens(Tokens.Type.STATIC, yytext (), (yyline+1), (yycolumn+1));
            }
          case 271: break;
          case 111: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Tipo de dato string "); return new Tokens(STRING, yytext(), yyline+1, yycolumn+1);
            }
          case 272: break;
          case 112: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada switch ");       return new Practicas.ACT2.Tokens(Tokens.Type.SWITCH, yytext (), (yyline+1), (yycolumn+1));
            }
          case 273: break;
          case 113: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada return ");       return new Practicas.ACT2.Tokens(Tokens.Type.RETURN, yytext (), (yyline+1), (yycolumn+1));
            }
          case 274: break;
          case 114: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada global "); return new Tokens(GLOBAL, yytext(), yyline+1, yycolumn+1);
            }
          case 275: break;
          case 115: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada endfor "); return new Tokens(ENDFOR, yytext(), yyline+1, yycolumn+1);
            }
          case 276: break;
          case 116: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada elseif "); return new Tokens(ELSEIF, yytext(), yyline+1, yycolumn+1);
            }
          case 277: break;
          case 117: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada public ");       return new Practicas.ACT2.Tokens(Tokens.Type.PUBLIC, yytext (), (yyline+1), (yycolumn+1));
            }
          case 278: break;
          case 118: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Funci√≥n m√°gica __call ");       return new Practicas.ACT2.Tokens(Tokens.Type.CALL, yytext(), (yyline+1), (yycolumn+1));
            }
          case 279: break;
          case 119: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada include "); return new Tokens(INCLUDE, yytext(), yyline+1, yycolumn+1);
            }
          case 280: break;
          case 120: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada finally "); return new Tokens(FINALLY, yytext(), yyline+1, yycolumn+1);
            }
          case 281: break;
          case 121: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada foreach "); return new Tokens(FOREACH, yytext(), yyline+1, yycolumn+1);
            }
          case 282: break;
          case 122: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada require ");      return new Practicas.ACT2.Tokens(Tokens.Type.REQUIRE, yytext (), (yyline+1), (yycolumn+1));
            }
          case 283: break;
          case 123: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada extends "); return new Tokens(EXTENDS, yytext(), yyline+1, yycolumn+1);
            }
          case 284: break;
          case 124: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada default "); return new Tokens(DEFAULT, yytext(), yyline+1, yycolumn+1);
            }
          case 285: break;
          case 125: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada declare "); return new Tokens(DECLARE, yytext(), yyline+1, yycolumn+1);
            }
          case 286: break;
          case 126: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada private ");      return new Practicas.ACT2.Tokens(Tokens.Type.PRIVATE, yytext (), (yyline+1), (yycolumn+1));
            }
          case 287: break;
          case 127: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Funci√≥n m√°gica __isset ");      return new Practicas.ACT2.Tokens(Tokens.Type.ISSET_MAGIC, yytext(), (yyline+1), (yycolumn+1));
            }
          case 288: break;
          case 128: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Funci√≥n m√°gica __sleep ");      return new Practicas.ACT2.Tokens(Tokens.Type.SLEEP, yytext(), (yyline+1), (yycolumn+1));
            }
          case 289: break;
          case 129: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Funci√≥n m√°gica __clone ");      return new Practicas.ACT2.Tokens(Tokens.Type.CLONE, yytext(), (yyline+1), (yycolumn+1));
            }
          case 290: break;
          case 130: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Funci√≥n m√°gica __unset ");      return new Practicas.ACT2.Tokens(Tokens.Type.UNSET_MAGIC, yytext(), (yyline+1), (yycolumn+1));
            }
          case 291: break;
          case 131: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Tipo de dato iterable "); return new Tokens(ITERABLE, yytext(), yyline+1, yycolumn+1);
            }
          case 292: break;
          case 132: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada function "); return new Tokens(FUNCTION, yytext(), yyline+1, yycolumn+1);
            }
          case 293: break;
          case 133: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada abstract "); return new Tokens(ABSTRACT, yytext(), yyline+1, yycolumn+1);
            }
          case 294: break;
          case 134: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada readonly ");     return new Practicas.ACT2.Tokens(Tokens.Type.READONLY, yytext (), (yyline+1), (yycolumn+1));
            }
          case 295: break;
          case 135: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Tipo de dato resource "); return new Tokens(RESOURCE, yytext(), yyline+1, yycolumn+1);
            }
          case 296: break;
          case 136: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada endwhile "); return new Tokens(ENDWHILE, yytext(), yyline+1, yycolumn+1);
            }
          case 297: break;
          case 137: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada continue "); return new Tokens(CONTINUE, yytext(), yyline+1, yycolumn+1);
            }
          case 298: break;
          case 138: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Tipo de dato callable "); return new Tokens(CALLABLE, yytext(), yyline+1, yycolumn+1);
            }
          case 299: break;
          case 139: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Funci√≥n m√°gica __invoke ");     return new Practicas.ACT2.Tokens(Tokens.Type.INVOKE, yytext(), (yyline+1), (yycolumn+1));
            }
          case 300: break;
          case 140: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Funci√≥n m√°gica __wakeup ");     return new Practicas.ACT2.Tokens(Tokens.Type.WAKEUP, yytext(), (yyline+1), (yycolumn+1));
            }
          case 301: break;
          case 141: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada interface "); return new Tokens(INTERFACE, yytext(), yyline+1, yycolumn+1);
            }
          case 302: break;
          case 142: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada insteadof "); return new Tokens(INSTEADOF, yytext(), yyline+1, yycolumn+1);
            }
          case 303: break;
          case 143: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada namespace "); return new Tokens(NAMESPACE, yytext(), yyline+1, yycolumn+1);
            }
          case 304: break;
          case 144: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada endswitch "); return new Tokens(ENDSWITCH, yytext(), yyline+1, yycolumn+1);
            }
          case 305: break;
          case 145: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada protected ");    return new Practicas.ACT2.Tokens(Tokens.Type.PROTECTED, yytext (), (yyline+1), (yycolumn+1));
            }
          case 306: break;
          case 146: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada instanceof "); return new Tokens(INSTANCEOF, yytext(), yyline+1, yycolumn+1);
            }
          case 307: break;
          case 147: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada implements "); return new Tokens(IMPLEMENTS, yytext(), yyline+1, yycolumn+1);
            }
          case 308: break;
          case 148: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada yield from "); return new Practicas.ACT2.Tokens(Tokens.Type.YIELD_FROM, yytext(), yyline+1, yycolumn+1);
            }
          case 309: break;
          case 149: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada endforeach "); return new Tokens(ENDFOREACH, yytext(), yyline+1, yycolumn+1);
            }
          case 310: break;
          case 150: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada enddeclare "); return new Tokens(ENDDECLARE, yytext(), yyline+1, yycolumn+1);
            }
          case 311: break;
          case 151: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Funci√≥n m√°gica __toString ");   return new Practicas.ACT2.Tokens(Tokens.Type.TOSTRING, yytext(), (yyline+1), (yycolumn+1));
            }
          case 312: break;
          case 152: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> (Deprecada) __autoload ");      return new Practicas.ACT2.Tokens(Tokens.Type.AUTOLOAD, yytext(), (yyline+1), (yycolumn+1));
            }
          case 313: break;
          case 153: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Funci√≥n m√°gica __destruct ");   return new Practicas.ACT2.Tokens(Tokens.Type.DESTRUCT, yytext(), (yyline+1), (yycolumn+1));
            }
          case 314: break;
          case 154: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Funci√≥n m√°gica __set_state ");  return new Practicas.ACT2.Tokens(Tokens.Type.SET_STATE, yytext(), (yyline+1), (yycolumn+1));
            }
          case 315: break;
          case 155: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Funci√≥n m√°gica __serialize ");  return new Practicas.ACT2.Tokens(Tokens.Type.SERIALIZE, yytext(), (yyline+1), (yycolumn+1));
            }
          case 316: break;
          case 156: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Funci√≥n m√°gica __construct ");  return new Practicas.ACT2.Tokens(Tokens.Type.CONSTRUCT, yytext(), (yyline+1), (yycolumn+1));
            }
          case 317: break;
          case 157: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Funci√≥n m√°gica __debugInfo ");  return new Practicas.ACT2.Tokens(Tokens.Type.DEBUGINFO, yytext(), (yyline+1), (yycolumn+1));
            }
          case 318: break;
          case 158: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada include_once "); return new Tokens(INCLUDE_ONCE, yytext(), yyline+1, yycolumn+1);
            }
          case 319: break;
          case 159: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Palabra reservada require_once "); return new Practicas.ACT2.Tokens(Tokens.Type.REQUIRE_ONCE, yytext(), yyline+1, yycolumn+1);
            }
          case 320: break;
          case 160: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Funci√≥n m√°gica __callStatic "); return new Practicas.ACT2.Tokens(Tokens.Type.CALLSTATIC, yytext(), (yyline+1), (yycolumn+1));
            }
          case 321: break;
          case 161: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); System.out.println(yytext()+" -> Funci√≥n m√°gica __unserialize "); return new Practicas.ACT2.Tokens(Tokens.Type.UNSERIALIZE, yytext(), (yyline+1), (yycolumn+1));
            }
          case 322: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
